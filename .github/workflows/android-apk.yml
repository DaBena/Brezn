name: Build Android APK (DEAKTIVIERT)

on:
  # DEAKTIVIERT - läuft nicht mehr automatisch
  # push:
  #   branches: [ "main" ]
  workflow_dispatch:  # Nur manueller Start möglich

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, x86_64-linux-android]
        build_type: [debug, release]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.1.8937393"
          yes | sdkmanager --licenses

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Android targets
        run: |
          rustup target add ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            brezn/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('brezn/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install native build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config cmake ninja-build \
            autoconf automake libtool m4 \
            clang lld nasm

      - name: Build Rust libraries for Android
        run: |
          export ANDROID_SDK_ROOT="$ANDROID_HOME"
          export ANDROID_NDK_HOME="$ANDROID_HOME/ndk/25.1.8937393"

          # Configure NDK toolchain and cross-compilers for Cargo/cc
          export NDK_TOOLCHAIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          export PATH="$NDK_TOOLCHAIN/bin:$PATH"
          export PKG_CONFIG_ALLOW_CROSS=1

          export CC_aarch64_linux_android="$NDK_TOOLCHAIN/bin/aarch64-linux-android21-clang"
          export CC_armv7_linux_androideabi="$NDK_TOOLCHAIN/bin/armv7a-linux-androideabi21-clang"
          export CC_x86_64_linux_android="$NDK_TOOLCHAIN/bin/x86_64-linux-android21-clang"

          export AR_aarch64_linux_android="$NDK_TOOLCHAIN/bin/llvm-ar"
          export AR_armv7_linux_androideabi="$NDK_TOOLCHAIN/bin/llvm-ar"
          export AR_x86_64_linux_android="$NDK_TOOLCHAIN/bin/llvm-ar"

          export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="$CC_aarch64_linux_android"
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="$CC_armv7_linux_androideabi"
          export CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER="$CC_x86_64_linux_android"

          export CARGO_TARGET_AARCH64_LINUX_ANDROID_AR="$AR_aarch64_linux_android"
          export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_AR="$AR_armv7_linux_androideabi"
          export CARGO_TARGET_X86_64_LINUX_ANDROID_AR="$AR_x86_64_linux_android"

          export RUST_BACKTRACE=1
          rustc --version
          cargo --version

          cd brezn
          cargo build -vv --target ${{ matrix.target }} --${{ matrix.build_type }} --lib --features mobile

      - name: Check for Android project
        id: check-android
        run: |
          if [ -f "brezn/mobile/android/gradlew" ]; then
            echo "android_exists=true" >> $GITHUB_OUTPUT
          else
            echo "android_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare jniLibs (if Android project exists)
        if: steps.check-android.outputs.android_exists == 'true'
        run: |
          mkdir -p brezn/mobile/android/app/src/main/jniLibs/arm64-v8a
          mkdir -p brezn/mobile/android/app/src/main/jniLibs/armeabi-v7a
          mkdir -p brezn/mobile/android/app/src/main/jniLibs/x86
          mkdir -p brezn/mobile/android/app/src/main/jniLibs/x86_64
          
          # Copy built libraries to appropriate directories
          if [ "${{ matrix.target }}" = "aarch64-linux-android" ]; then
            cp brezn/target/aarch64-linux-android/${{ matrix.build_type }}/libbrezn.so brezn/mobile/android/app/src/main/jniLibs/arm64-v8a/ || echo "Library not found for aarch64"
          elif [ "${{ matrix.target }}" = "armv7-linux-androideabi" ]; then
            cp brezn/target/armv7-linux-androideabi/${{ matrix.build_type }}/libbrezn.so brezn/mobile/android/app/src/main/jniLibs/armeabi-v7a/ || echo "Library not found for armv7"
          elif [ "${{ matrix.target }}" = "x86_64-linux-android" ]; then
            cp brezn/target/x86_64-linux-android/${{ matrix.build_type }}/libbrezn.so brezn/mobile/android/app/src/main/jniLibs/x86_64/ || echo "Library not found for x86_64"
          fi

      - name: Install mobile dependencies
        if: steps.check-android.outputs.android_exists == 'true'
        run: |
          cd brezn/mobile
          npm ci

      - name: Build Android APK
        if: steps.check-android.outputs.android_exists == 'true'
        run: |
          cd brezn/mobile/android
          chmod +x gradlew
          ./gradlew assemble${{ matrix.build_type }}

      - name: Upload APK
        if: steps.check-android.outputs.android_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: brezn-android-${{ matrix.target }}-${{ matrix.build_type }}
          path: brezn/mobile/android/app/build/outputs/apk/${{ matrix.build_type }}/*.apk

      - name: Skip - Android project not present
        if: steps.check-android.outputs.android_exists == 'false'
        run: |
          echo "Android project not found at brezn/mobile/android. Commit the React Native Android project to build APKs." 
          exit 0