name: 🤖 AI Development Agent - Brezn MVP

# Läuft kontinuierlich - ein Agent wartet auf den anderen
on:
  workflow_dispatch:  # Manueller Start
  push:
    branches: [ 'ai-feature/**' ]  # Läuft NUR auf Feature Branches
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
  # Erster Agent startet von main, alle anderen von Feature Branches
  # Kein schedule - Agenten laufen sequenziell

# Verhindert parallele Ausführung - nur ein Agent gleichzeitig
concurrency:
  group: ai-agent-chain
  cancel-in-progress: false

jobs:
  ai-development:
    name: 🤖 AI Agent Development
    runs-on: ubuntu-latest
    
    # Umgebungsvariablen für AI Agent
    env:
      RUST_BACKTRACE: 1
      CARGO_TERM_COLOR: always
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: 📥 Repository auschecken
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Vollständige Git-Historie für AI-Analyse
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🦀 Rust Toolchain einrichten
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: 📦 Dependencies installieren
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
          cargo install cargo-audit
          cargo install cargo-tarpaulin
      
      - name: 🔍 Projektstatus analysieren
        id: analyze
        run: |
          echo "🤖 Analysiere Brezn Projektstatus..."
          
          # MVP-Fortschritt berechnen
          TOTAL_FEATURES=10
          COMPLETED_FEATURES=$(find src -name "*.rs" -exec grep -l "impl.*Peer\|impl.*Tor\|impl.*QR" {} \; | wc -l)
          MVP_PROGRESS=$((COMPLETED_FEATURES * 100 / TOTAL_FEATURES))
          
          echo "📊 MVP-Fortschritt: ${MVP_PROGRESS}%"
          echo "✅ Abgeschlossene Features: ${COMPLETED_FEATURES}/${TOTAL_FEATURES}"
          
          # Nächste Features identifizieren
          if [ $MVP_PROGRESS -lt 50 ]; then
            NEXT_FEATURE="p2p-peer-discovery"
            PRIORITY="high"
          elif [ $MVP_PROGRESS -lt 70 ]; then
            NEXT_FEATURE="tor-integration"
            PRIORITY="medium"
          else
            NEXT_FEATURE="qr-code-implementation"
            PRIORITY="low"
          fi
          
          echo "🎯 Nächstes Feature: ${NEXT_FEATURE}"
          echo "⚡ Priorität: ${PRIORITY}"
          
          # Output für nächste Steps
          echo "mvp_progress=${MVP_PROGRESS}" >> $GITHUB_OUTPUT
          echo "next_feature=${NEXT_FEATURE}" >> $GITHUB_OUTPUT
          echo "priority=${PRIORITY}" >> $GITHUB_OUTPUT
      
      - name: 🧪 Tests laufen lassen
        run: |
          echo "🧪 Führe alle Tests aus..."
          cargo test --verbose
          cargo clippy -- -D warnings
          cargo fmt -- --check
      
      - name: 🐍 Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Python Dependencies installieren
        run: |
          python -m pip install --upgrade pip
          pip install pathlib typing-extensions
      
      - name: 🤖 AI Agent starten
        id: ai_agent
        run: |
          echo "🤖 Starte Brezn AI Development Agent..."
          
          # AI Agent ausführbar machen
          chmod +x .github/scripts/ai_agent.py
          
          # AI Agent ausführen
          python .github/scripts/ai_agent.py
          
          # Ausgabe für nächste Steps
          echo "ai_agent_completed=true" >> $GITHUB_OUTPUT
      
      - name: 🔍 Feature Branch Status prüfen
        id: check_branch
        run: |
          echo "🔍 Prüfe Feature Branch Status..."
          
          FEATURE_NAME="${{ steps.analyze.outputs.next_feature }}"
          
          # Suche nach existierenden Feature Branches
          EXISTING_BRANCHES=$(git branch -r | grep "ai-feature/${FEATURE_NAME}" | head -1 | sed 's/origin\///')
          
          if [ -n "$EXISTING_BRANCHES" ]; then
            echo "🔄 Existierender Feature Branch gefunden: ${EXISTING_BRANCHES}"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "existing_branch=${EXISTING_BRANCHES}" >> $GITHUB_OUTPUT
            
            # Branch auschecken
            git checkout -b "${EXISTING_BRANCHES}" origin/"${EXISTING_BRANCHES}"
            echo "✅ Auf existierendem Branch weitergearbeitet: ${EXISTING_BRANCHES}"
          else
            echo "🆕 Erstelle neuen Feature Branch..."
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            
            # Neuen Branch erstellen
            BRANCH_NAME="ai-feature/${FEATURE_NAME}-$(date +%Y%m%d-%H%M)"
            git checkout -b "$BRANCH_NAME"
            echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
            echo "✅ Neuer Feature Branch erstellt: ${BRANCH_NAME}"
          fi
      
      - name: 🔧 Feature implementieren
        id: implement
        run: |
          echo "🔧 Implementiere Feature..."
          
          # Änderungen committen
          git add .
          git config user.email "brezn-dev@noreply.github.com"
          git config user.name "Brezn AI Developer"
          
          if [ "${{ steps.check_branch.outputs.branch_exists }}" == "true" ]; then
            COMMIT_MSG="🤖 AI Agent: Weiterentwicklung ${FEATURE_NAME} (Fortsetzung)"
            echo "📝 Commit: ${COMMIT_MSG}"
          else
            COMMIT_MSG="🤖 AI Agent: Start ${FEATURE_NAME} Implementation"
            echo "📝 Commit: ${COMMIT_MSG}"
          fi
          
          git commit -m "${COMMIT_MSG}"
          
          # Branch pushen
          if [ "${{ steps.check_branch.outputs.branch_exists }}" == "true" ]; then
            BRANCH_NAME="${{ steps.check_branch.outputs.existing_branch }}"
          else
            BRANCH_NAME="${{ steps.check_branch.outputs.branch_name }}"
          fi
          
          git push origin "$BRANCH_NAME"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
      
      - name: 🔄 Pull Request erstellen
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "🤖 AI Agent: ${{ steps.analyze.outputs.next_feature }} Implementation"
          body: |
            ## 🤖 Automatisch implementiert von AI Agent
            
            **Feature:** ${{ steps.analyze.outputs.next_feature }}
            **Priorität:** ${{ steps.analyze.outputs.priority }}
            **MVP-Fortschritt:** ${{ steps.analyze.outputs.mvp_progress }}%
            
            ### 📋 Was wurde implementiert:
            - Automatische Feature-Implementierung
            - Tests geschrieben und bestanden
            - Code formatiert und gelintet
            
            ### 🔍 Qualitätskontrolle:
            - ✅ Alle Tests bestehen
            - ✅ Code-Formatierung korrekt
            - ✅ Clippy-Warnungen behoben
            - ✅ Keine Breaking Changes
            
            ### 🚀 Nächste Schritte:
            - Code-Review durch Community
            - Integration-Tests
            - Merge in main branch
            
            ---
            *Dieser PR wurde automatisch von einem AI Agenten erstellt*
          branch: ${{ steps.implement.outputs.branch_name }}
          base: main
          delete-branch: false
          labels: |
            ai-agent
            feature
            automated
            mvp-development
      
      - name: 📊 Entwicklung-Status aktualisieren
        run: |
          echo "📊 Aktualisiere Entwicklungs-Status..."
          
          # Status in Issue oder Wiki aktualisieren
          echo "## 🤖 AI Agent Development Status" >> development-status.md
          echo "**Letzte Ausführung:** $(date)" >> development-status.md
          echo "**MVP-Fortschritt:** ${{ steps.analyze.outputs.mvp_progress }}%" >> development-status.md
          echo "**Implementiertes Feature:** ${{ steps.analyze.outputs.next_feature }}" >> development-status.md
          echo "**Feature Branch:** ${{ steps.implement.outputs.branch_name }}" >> development-status.md
          echo "**Status:** Feature implementiert, warte auf nächsten Agenten..." >> development-status.md
      
      - name: 🔄 Nächsten Agenten starten
        if: success()
        run: |
          echo "🔄 Starte nächsten Agenten in der Kette..."
          
          # GitHub API verwenden um nächsten Workflow zu starten
          FEATURE_NAME="${{ steps.analyze.outputs.next_feature }}"
          BRANCH_NAME="${{ steps.implement.outputs.branch_name }}"
          
          # Prüfe ob Feature vollständig implementiert ist
          if [ "${{ steps.ai_agent.outputs.implementation_success }}" == "true" ]; then
            echo "✅ Feature erfolgreich implementiert - nächster Agent startet automatisch"
            
            # Starte nächsten Workflow mit 30 Sekunden Verzögerung
            sleep 30
            
            # WICHTIG: Starte nächsten Workflow vom FEATURE BRANCH aus, nicht von main!
            gh workflow run ai-agent-development.yml --ref "$BRANCH_NAME"
            
            echo "🚀 Nächster Agent startet vom Feature Branch: $BRANCH_NAME"
          else
            echo "❌ Feature nicht vollständig - warte auf manuellen Start"
          fi
      
      - name: 🎉 Erfolg melden
        if: success()
        run: |
          echo "🎉 AI Agent erfolgreich abgeschlossen!"
          echo "📊 MVP-Fortschritt: ${{ steps.analyze.outputs.mvp_progress }}%"
          echo "🎯 Implementiertes Feature: ${{ steps.analyze.outputs.next_feature }}"
          echo "🌿 Feature Branch: ${{ steps.implement.outputs.branch_name }}"
          echo "🔄 Nächster Agent startet automatisch in 30 Sekunden..."
          echo "⏰ Kontinuierliche Entwicklung läuft..."
      
      - name: ❌ Fehler melden
        if: failure()
        run: |
          echo "❌ AI Agent fehlgeschlagen!"
          echo "🔍 Überprüfe die Logs für Details"
          echo "🔄 Agenten-Kette pausiert - manueller Start erforderlich"
          echo "📋 Feature Branch: ${{ steps.implement.outputs.branch_name || 'Unbekannt' }}"
