# 🚨 CRITICAL: Email Protection Rules - Brezn Project
# Diese Regeln verhindern, dass Cursor private E-Mail-Adressen veröffentlicht

## 🔒 MANDATORY FOR ALL AGENTS (Local + Online):

### 🚨 ABSOLUTE PROHIBITIONS:
- **NEVER** add private email addresses to commits, PRs, or code
- **NEVER** use Co-authored-by lines with real email addresses
- **NEVER** push directly to main/develop branches
- **NEVER** bypass pull request requirements

### 📝 COMMIT RULES:
- Use ONLY: `brezn-dev@noreply.github.com` for user.email
- Use ONLY: `Brezn Developer` for user.name
- **NEVER** add Co-authored-by lines with private emails
- **NEVER** include email addresses in commit messages

### 🔄 WORKFLOW RULES:
- **ALWAYS** create feature branches for changes
- **ALWAYS** submit changes via Pull Requests
- **NEVER** push directly to protected branches
- **ALWAYS** wait for human review and approval

## 🚀 FOR LOCAL AGENTS ONLY:
# BEVOR Sie irgendwelche Änderungen machen, führen Sie IMMER aus:

# Windows (PowerShell):
# .\scripts\setup_git_protection.ps1

# Linux/Mac:
# chmod +x scripts/setup_git_protection.sh
# ./scripts/setup_git_protection.sh

## 🔒 FOR ONLINE AGENTS (GitHub/GitLab):

### 🚨 CRITICAL: You CANNOT bypass these protections!
- **Branch Protection Rules** are active on main/develop
- **Email Protection GitHub Action** runs on every PR
- **Direct pushes to main are BLOCKED**
- **All changes require Pull Request approval**

### 📋 REQUIRED WORKFLOW:
1. **Fork** the repository or create a **feature branch**
2. **Make changes** in your branch
3. **Create Pull Request** with your changes
4. **Wait for Email Protection check** to pass
5. **Wait for human reviewer** to approve
6. **NEVER** try to bypass these protections

### ⚠️ WHAT HAPPENS IF YOU VIOLATE:
- **Email Protection Action** will BLOCK your PR
- **Human reviewers** will REJECT your PR
- **Repository administrators** will be notified
- **Your access** may be restricted

## 🎯 SAFE EMAIL PATTERNS:
✅ **ALLOWED:**
- `brezn-dev@noreply.github.com`
- `user@placeholder.com` (in code examples)
- `test@example.com` (in tests)
- Generic usernames without email domains

❌ **BLOCKED:**
- `yourname@gmail.com`
- `realuser@web.de`
- `personal@gmx.com`
- `user@t-online.de`
- `test@freenet.de`
- `admin@arcor.de`
- `info@1und1.de`
- `support@vodafone.de`
- `help@telekom.de`
- `contact@t-mobile.de`
- `service@o2.de`
- `support@eplus.de`
- `user@aol.com`
- `test@icloud.com`
- `admin@me.com`
- `info@mac.com`
- `user@protonmail.com`
- `test@tutanota.de`
- `admin@posteo.de`
- `info@mailbox.org`
- Any real email addresses from major providers

## 🔧 TECHNICAL IMPLEMENTATION:
- **GitHub Actions** automatically check all commits
- **Branch Protection** prevents direct pushes
- **Pre-commit hooks** run locally
- **Post-receive hooks** run on server

## ⚠️ FINAL WARNING:
# If you ignore these rules, you WILL leak private email addresses!
# This is a data protection violation that cannot be undone!
# The repository has MULTIPLE layers of protection that you cannot bypass!

## 🆘 NEED HELP?
- Read the GitHub Action logs for specific errors
- Check branch protection rules in repository settings
- Contact repository administrators for access issues
- Follow the exact workflow described above

# ============================================================================
# 🤖 CURSOR AGENT AUTOMATION RULES - BREZN MVP
# ============================================================================

## 🚀 AUTOMATED DEVELOPMENT WORKFLOW:

### 📋 BEFORE STARTING ANY FEATURE:
1. **ALWAYS** read `docs/PROJECT_STATUS_ACTUAL.md` first
2. **CHECK** current MVP progress percentage
3. **IDENTIFY** next pending feature from priority list
4. **CREATE** feature branch: `feature/auto-{feature-name}`

### 🔧 FEATURE IMPLEMENTATION RULES:
- **REPLACE** all placeholders with functional code
- **IMPLEMENT** complete features, not partial solutions
- **ADD** comprehensive tests for every new feature
- **UPDATE** documentation inline with code changes

### 📊 PRIORITY SYSTEM (Follow strictly):
1. **HIGH (MVP 0-50%)**: P2P-Network, Peer-Discovery
2. **MEDIUM (MVP 50-70%)**: Tor-Integration, SOCKS5
3. **LOW (MVP 70-100%)**: QR-Code, UI Polish

### 🧪 QUALITY REQUIREMENTS:
- **NO** `unwrap()` in production code - use proper error handling
- **NO** TODO comments in final implementation
- **NO** placeholder returns - implement real functionality
- **ALWAYS** use async/await for network operations
- **ALWAYS** validate input data
- **ALWAYS** handle edge cases

### 📝 CODE PATTERNS TO FOLLOW:
```rust
// ❌ WRONG - Placeholder
pub fn connect_peer() -> Result<()> {
    todo!("Implement peer connection")
}

// ✅ CORRECT - Functional
pub async fn connect_peer(addr: SocketAddr) -> Result<Peer> {
    let stream = TcpStream::connect(addr).await?;
    let peer = Peer::new(stream, addr)?;
    self.peers.lock().unwrap().insert(peer.id.clone(), peer.clone());
    Ok(peer)
}
```

### 🔄 AUTOMATED TASKS:
- **ON SAVE**: Run `cargo fmt` and `cargo clippy`
- **BEFORE COMMIT**: Run `cargo test`
- **AFTER FEATURE**: Update PROJECT_STATUS_ACTUAL.md
- **ON ERROR**: Rollback to last working state

### 📈 PROGRESS TRACKING:
- **UPDATE** percentage in PROJECT_STATUS_ACTUAL.md after each feature
- **MARK** completed features in implementation status
- **LOG** time spent on each feature for optimization
- **REPORT** blockers or issues immediately

### 🎯 SPECIFIC IMPLEMENTATION TARGETS:

#### P2P Network (Priority: HIGH):
- File: `src/network.rs`
- Implement: UDP broadcast discovery
- Add: Peer registry with heartbeat
- Test: Multi-peer connectivity

#### Tor Integration (Priority: MEDIUM):
- File: `src/tor.rs`
- Implement: SOCKS5 proxy connection
- Add: Circuit management
- Test: Anonymous routing

#### QR Code (Priority: LOW):
- File: `src/discovery.rs`
- Implement: QR generation/parsing
- Add: Peer join via QR scan
- Test: Cross-platform compatibility

## 🚫 AUTOMATION BOUNDARIES:
- **NEVER** modify email protection rules
- **NEVER** commit directly to main/develop
- **NEVER** skip tests to save time
- **NEVER** implement features not in PROJECT_STATUS_ACTUAL.md
- **ALWAYS** respect the 3-week MVP timeline
